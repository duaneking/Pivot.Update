using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Kayak;
using Kayak.Http;
using System.IO;
using System.Web;
using Ionic.Zip;

namespace Pivot.Update.Server
{
    public class GetZipOperation : IOperation
    {
        #region IOperation Members

        public bool Handles(string query)
        {
            return (query == "zip");
        }

        public void Handle(string appname, string[] components, HttpRequestHead head, IDataProducer body, IHttpResponseDelegate response)
        {
            // Get a list of all of the files in the store for this application.
            Cache c = new Cache(false);
            IEnumerable<string> files = c.ListRecursive("server/" + appname + "/store");

            // Create ZIP file and copy files into it.
            using (ZipFile zip = new ZipFile())
            {
                // Add the files.
                foreach (string s in files)
                {
                    ZipEntry e = zip.AddFile(c.GetFilePath("server/" + appname + "/store/" + s), this.GetDirectoryName(s));
                    e.Comment = "Added by Pivot.Server.";
                }

                // Add the README-UPDATES.txt file.
                zip.AddEntry("README-UPDATES.txt",
@"About
===============
This ZIP file was automatically generated by the Pivot.Update server.
Refer to https://github.com/hach-que/Pivot.Update/ for more information.

Usage Notice
===============
The software contained in this ZIP file may use Pivot.Update to
automatically update itself when new versions are released.  In the
event that it does, a UAC prompt may appear when the related Windows
service first needs to be installed.  This Windows service is responsible
for automatically updating applications on a periodic basis; without
this service, the associated software will not automatially update.
");

                zip.Comment = "ZIP file automatically generated by Pivot.Server.";

                using (MemoryStream output = new MemoryStream())
                {
                    zip.Save(output);

                    // Send the ZIP file.
                    response.OnResponse(new HttpResponseHead()
                    {
                        Status = "200 OK",
                        Headers = new Dictionary<string, string>
                        {
                            { "Content-Type", "application/zip" },
                            { "Content-Length", output.Length.ToString() },
                            { "Content-Disposition", "attachment; filename=\"" + appname + ".zip\"" },
                            { "Connection", "close" }
                        }
                    }, new BufferedProducer(output.ToArray()));
                }
            }
        }

        private string GetDirectoryName(string s)
        {
            int i = s.LastIndexOf('/');
            if (i == -1)
                return "";
            else
                return s.Substring(0, i);
        }

        #endregion
    }
}
